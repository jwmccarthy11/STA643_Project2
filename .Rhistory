# draw the random uniforms and turn the hypercube into a sample
U <- matrix(runif(n*m), ncol=m)
X <- (L + (n - 1)/2 + U)/n
colnames(X) <- paste0("x", 1:m)
# return the design and the grid it lives on for visualization
return(list(X=X, g=c((l + (n - 1)/2)/n,1)))
}
lhs(6, 10, ranges)
lhs <- function(m, n, r) {
# generate the Latin hypercube
l <- (-(n - 1)/2):((n - 1)/2)
L <- matrix(NA, nrow=n, ncol=m)
for(j in 1:m) L[,j] <- sample(l, n)
# draw the random uniforms and turn the hypercube into a sample
U <- matrix(runif(n*m), ncol=m)
X <- (L + (n - 1)/2 + U)/n
colnames(X) <- colnames(r)
# return the design and the grid it lives on for visualization
return(list(X=X, g=c((l + (n - 1)/2)/n,1)))
}
lhs(6, 10, ranges)
x <- lhs(6, 10, ranges)
x * ranges
x * ranges[1,]
x * ranges[1,]
x <- lhs(6, 10, ranges)[1]
x
x <- lhs(6, 10, ranges)$X
x
x * ranges[1,]
xp <- x * (ranges[2,]-ranges[1,]) + ranges[1,]
xp
x + c(1, 2, 3, 4, 5, 6)
x
x * (ranges[2,]-ranges[1,]) + rep(ranges[1,], each=10)
x
x * rep(ranges[2,]-ranges[1,], each=10) + rep(ranges[1,], each=10)
lhs <- function(m, n, r) {
# generate the Latin hypercube
l <- (-(n - 1)/2):((n - 1)/2)
L <- matrix(NA, nrow=n, ncol=m)
for(j in 1:m) L[,j] <- sample(l, n)
# draw the random uniforms and turn the hypercube into a sample
U <- matrix(runif(n*m), ncol=m)
X <- (L + (n - 1)/2 + U)/n
X <- X*rep(r[2,]-r[1,], each=n) + rep(r[1,], each=n)
colnames(X) <- colnames(r)
# return the design and the grid it lives on for visualization
return(list(X=X, g=c((l + (n - 1)/2)/n,1)))
}
lhs(6, 10, ranges)
lhs <- function(m, n, r) {
# generate the Latin hypercube
l <- (-(n - 1)/2):((n - 1)/2)
L <- matrix(NA, nrow=n, ncol=m)
for(j in 1:m) L[,j] <- sample(l, n)
# draw the random uniforms and turn the hypercube into a sample
U <- matrix(runif(n*m), ncol=m)
X <- (L + (n - 1)/2 + U)/n
X <- X*rep(r[2,]-r[1,], each=n) + rep(r[1,], each=n)
colnames(X) <- colnames(r)
# return the design
# return(list(X=X, g=c((l + (n - 1)/2)/n,1)))
return(X)
}
clear
lhs(6, 15, ranges)
criterion <- function(X) {
d <- distance(X)
d <- d[upper.tri(d)]
min(d)
}
maximin <- function(n, m, T=100000)
{
X <- mylhs(n, m)$X     ## initial design
md <- criterion(X)
for(t in 1:T) {
# select random column and pair of rows
rows <- sample(1:n, 2)
col <- sample(1:m, 1)
xold <- X[rows,col]
# swap values in row pair
X[rows,col] <- X[rev(rows),col]
# keep better arrangement
mdprime <- criterion(X)
if(mdprime > md) {
md <- mdprime                   ## accept
} else {
X[rows,col] <- xold             ## reject
}
}
return(X)
}
criterion <- function(X) {
d <- distance(X)
d <- d[upper.tri(d)]
min(d)
}
maximin <- function(n, m, T=100000)
{
X <- lhs(n, m)$X     ## initial design
md <- criterion(X)
for(t in 1:T) {
# select random column and pair of rows
rows <- sample(1:n, 2)
col <- sample(1:m, 1)
xold <- X[rows,col]
# swap values in row pair
X[rows,col] <- X[rev(rows),col]
# keep better arrangement
mdprime <- criterion(X)
if(mdprime > md) {
md <- mdprime                   ## accept
} else {
X[rows,col] <- xold             ## reject
}
}
return(X)
}
maximin(10, 6)
maximin(10, 6, ranges)
criterion <- function(X) {
d <- distance(X)
d <- d[upper.tri(d)]
min(d)
}
maximin <- function(n, m, r, T=100000)
{
X <- lhs(n, m, r)$X     ## initial design
md <- criterion(X)
for(t in 1:T) {
# select random column and pair of rows
rows <- sample(1:n, 2)
col <- sample(1:m, 1)
xold <- X[rows,col]
# swap values in row pair
X[rows,col] <- X[rev(rows),col]
# keep better arrangement
mdprime <- criterion(X)
if(mdprime > md) {
md <- mdprime                   ## accept
} else {
X[rows,col] <- xold             ## reject
}
}
return(X)
}
clear
maximin(10, 6, ranges)
criterion <- function(X) {
d <- distance(X)
d <- d[upper.tri(d)]
min(d)
}
maximin <- function(n, m, r, T=100000)
{
X <- lhs(n, m, r)     ## initial design
md <- criterion(X)
for(t in 1:T) {
# select random column and pair of rows
rows <- sample(1:n, 2)
col <- sample(1:m, 1)
xold <- X[rows,col]
# swap values in row pair
X[rows,col] <- X[rev(rows),col]
# keep better arrangement
mdprime <- criterion(X)
if(mdprime > md) {
md <- mdprime                   ## accept
} else {
X[rows,col] <- xold             ## reject
}
}
return(X)
}
maximin(10, 6, ranges)
criterion <- function(X) {
d <- distance(X)
d <- d[upper.tri(d)]
min(d)
}
maximin <- function(n, m, r, T=100000)
{
X <- lhs(n, m, r)     ## initial design
print(X)
md <- criterion(X)
for(t in 1:T) {
# select random column and pair of rows
rows <- sample(1:n, 2)
col <- sample(1:m, 1)
xold <- X[rows,col]
# swap values in row pair
X[rows,col] <- X[rev(rows),col]
# keep better arrangement
mdprime <- criterion(X)
if(mdprime > md) {
md <- mdprime                   ## accept
} else {
X[rows,col] <- xold             ## reject
}
}
return(X)
}
maximin(10, 6, ranges)
criterion <- function(X) {
d <- distance(X)
d <- d[upper.tri(d)]
min(d)
}
maximin <- function(n, m, r, T=100000)
{
X <- lhs(m, n, r)     ## initial design
print(X)
md <- criterion(X)
for(t in 1:T) {
# select random column and pair of rows
rows <- sample(1:n, 2)
col <- sample(1:m, 1)
xold <- X[rows,col]
# swap values in row pair
X[rows,col] <- X[rev(rows),col]
# keep better arrangement
mdprime <- criterion(X)
if(mdprime > md) {
md <- mdprime                   ## accept
} else {
X[rows,col] <- xold             ## reject
}
}
return(X)
}
maximin(10, 6, ranges)
criterion <- function(X) {
d <- distance(X)
d <- d[upper.tri(d)]
min(d)
}
maximin <- function(n, m, r, T=100000)
{
X <- lhs(m, n, r)     ## initial design
md <- criterion(X)
for(t in 1:T) {
# select random column and pair of rows
rows <- sample(1:n, 2)
col <- sample(1:m, 1)
xold <- X[rows,col]
# swap values in row pair
X[rows,col] <- X[rev(rows),col]
# keep better arrangement
mdprime <- criterion(X)
if(mdprime > md) {
md <- mdprime                   ## accept
} else {
X[rows,col] <- xold             ## reject
}
}
return(X)
}
initial_design <- maximin(10,6,ranges)
initial_design
initial_design[,1:2]
pair <- initial_design[,1:2]
ggplot(aes(x=pair[,1], y=pair[,2]), data=NULL) +
geom_point()
criterion <- function(X) {
d <- distance(X)
d <- d[upper.tri(d)]
min(d)
}
maximin <- function(m, n, r, T=100000)
{
X <- lhs(m, n, r)     ## initial design
md <- criterion(X)
for(t in 1:T) {
# select random column and pair of rows
rows <- sample(1:n, 2)
col <- sample(1:m, 1)
xold <- X[rows,col]
# swap values in row pair
X[rows,col] <- X[rev(rows),col]
# keep better arrangement
mdprime <- criterion(X)
if(mdprime > md) {
md <- mdprime                   ## accept
} else {
X[rows,col] <- xold             ## reject
}
}
return(X)
}
maximin(m, 10, ranges)
maximin(6, 10, ranges)
combn(1:6, 2)
init_design <- maximin(6, 10, ranges)
plotmatrix(init_design)
library(tidyverse)
library(plgp)
library(gridExtra)
init_design <- maximin(6, 10, ranges) %>%
as.data.frame()
# sample projections
p1 <- init_design %>%
ggplot(aes(x=ymod, y=prat)) +
geom_point()
# sample projections
p1 <- init_design %>%
ggplot(aes(x=ymod, y=prat)) +
geom_point()
init_design
View(init_design)
# sample projections
init_design %>%
ggplot(aes(x=ymod, y=prat)) +
geom_point()
# sample projections
p1 <- init_design %>%
ggplot(aes(x=ymod, y=prat)) +
geom_point() +
labs(x="Young's Modulus",
y="Poisson's Ratio") +
theme_bw()
# sample projections
init_design %>%
ggplot(aes(x=ymod, y=prat)) +
geom_point() +
labs(x="Young's Modulus",
y="Poisson's Ratio") +
theme_bw()
init_design
init_design <- maximin(6, 10, ranges) %>%
as.data.frame()
# sample projections
p1 <- init_design %>%
ggplot(aes(x=ymod, y=prat)) +
geom_point() +
labs(x="Young's Modulus",
y="Poisson's Ratio") +
theme_bw()
p2 <- init_design %>%
ggplot(aes(x=cote, y=tcon)) +
geom_point() +
labs(x="Coefficient of Thermal Expansion",
y="Thermal Conductivity") +
theme_bw()
p3 <- init_design %>%
ggplot(aes(x=icat, y=plos)) +
geom_point() +
labs(x="Internal Cooling Air Temperature",
y="Pressure Load on Suction") +
theme_bw()
grid.arrange(p1, p2, p3, nrow=1)
init_design <- maximin(6, 10, ranges) %>%
as.data.frame()
# sample projections
p1 <- init_design %>%
ggplot(aes(x=ymod, y=prat)) +
geom_point() +
title("Young's Modulus vs. Poisson's Ratio") +
theme_bw()
init_design <- maximin(6, 10, ranges) %>%
as.data.frame()
# sample projections
p1 <- init_design %>%
ggplot(aes(x=ymod, y=prat)) +
geom_point() +
labs(title="Young's Modulus vs. Poisson's Ratio") +
theme_bw()
p2 <- init_design %>%
ggplot(aes(x=cote, y=tcon)) +
geom_point() +
labs(title="Thermal Expansion vs. Thermal COnductivity") +
theme_bw()
p3 <- init_design %>%
ggplot(aes(x=icat, y=plos)) +
geom_point() +
labs(title="Cooling Air Temp. vs. Pressure Load")
theme_bw()
grid.arrange(p1, p2, p3, nrow=1)
init_design <- maximin(6, 10, ranges) %>%
as.data.frame()
# sample projections
p1 <- init_design %>%
ggplot(aes(x=ymod, y=prat)) +
geom_point() +
labs(title="Young's Modulus vs. Poisson's Ratio") +
theme_bw()
p2 <- init_design %>%
ggplot(aes(x=cote, y=tcon)) +
geom_point() +
labs(title="Thermal Expansion vs. Thermal COnductivity") +
theme_bw()
p3 <- init_design %>%
ggplot(aes(x=icat, y=plos)) +
geom_point() +
labs(title="Cooling Air Temp. vs. Pressure Load") +
theme_bw()
grid.arrange(p1, p2, p3, nrow=1)
init_design <- maximin(6, 10, ranges) %>%
as.data.frame()
# sample projections
p1 <- init_design %>%
ggplot(aes(x=ymod, y=prat)) +
geom_point() +
labs(x="", y="", title="Young's Modulus vs. Poisson's Ratio") +
theme_bw()
p2 <- init_design %>%
ggplot(aes(x=cote, y=tcon)) +
geom_point() +
labs(x="", y="", title="Thermal Expansion vs. Thermal COnductivity") +
theme_bw()
p3 <- init_design %>%
ggplot(aes(x=icat, y=plos)) +
geom_point() +
labs(x="", y="", title="Cooling Air Temp. vs. Pressure Load") +
theme_bw()
p4 <- init_design %>%
ggplot(aes(x=ymod, y=plos)) +
geom_point() +
labs(x="", y="", title="Young's Modulus vs. Pressure Load") +
theme_bw()
grid.arrange(p1, p2, p3, p4, nrow=2)
install.packages("R.matlab")
clear
knitr::opts_chunk$set(echo=T,
message=F,
warning=F)
library(R.matlab)
Matlab$startServer()
matlab <- Matlab()
x <- 10
setVariable(matlab, x=x)
isOpen <- open(matlab)
Matlab$startServer()
#set a variable in R and save in a csv file
x <- 10
write.table(x, file='~/x.csv', sep=",", row.names=FALSE, col.names=FALSE)
#make a vector where each element is a line of MATLAB code
#matlab code reads in our variable x, creates two variables y and z,
#and write z in a csv file
matlab.lines <- c(
"x = csvread('~/x.csv')",
"y=20",
"z=x+y",
"csvwrite('~/z.csv', z)")
#create a MATLAB script containing all the commands in matlab.lines
writeLines(matlab.lines, con="~/myscript.m")
#run our MATLAB script
system("matlab -nodisplay -r \"run('~/myscript.m'); exit\"")
matlab -nodisplay
#set a variable in R and save in a csv file
x <- 10
write.table(x, file='~/x.csv', sep=",", row.names=FALSE, col.names=FALSE)
#make a vector where each element is a line of MATLAB code
#matlab code reads in our variable x, creates two variables y and z,
#and write z in a csv file
matlab.lines <- c(
"x = csvread('~/x.csv')",
"y=20",
"z=x+y",
"csvwrite('~/z.csv', z)")
#create a MATLAB script containing all the commands in matlab.lines
writeLines(matlab.lines, con="~/myscript.m")
#run our MATLAB script
system("matlab -nodisplay -r \"run('~/myscript.m'); exit\"")
#set a variable in R and save in a csv file
x <- 10
write.table(x, file='~/x.csv', sep=",", row.names=FALSE, col.names=FALSE)
#make a vector where each element is a line of MATLAB code
#matlab code reads in our variable x, creates two variables y and z,
#and write z in a csv file
matlab.lines <- c(
"x = csvread('~/x.csv')",
"y=20",
"z=x+y",
"csvwrite('~/z.csv', z)")
#create a MATLAB script containing all the commands in matlab.lines
writeLines(matlab.lines, con="~/myscript.m")
#run our MATLAB script
system("matlab -nodisplay -r \"run('~/myscript.m'); exit\"")
#set a variable in R and save in a csv file
x <- 10
write.table(x, file='~/x.csv', sep=",", row.names=FALSE, col.names=FALSE)
#make a vector where each element is a line of MATLAB code
#matlab code reads in our variable x, creates two variables y and z,
#and write z in a csv file
matlab.lines <- c(
"x = csvread('~/x.csv')",
"y=20",
"z=x+y",
"csvwrite('~/z.csv', z)")
#create a MATLAB script containing all the commands in matlab.lines
writeLines(matlab.lines, con="~/myscript.m")
#run our MATLAB script
system("matlab -nodisplay -r \"run('~/myscript.m'); exit\"")
knitr::opts_chunk$set(echo=T,
message=F,
warning=F)
#set a variable in R and save in a csv file
x <- 10
write.table(x, file='~/x.csv', sep=",", row.names=FALSE, col.names=FALSE)
#make a vector where each element is a line of MATLAB code
#matlab code reads in our variable x, creates two variables y and z,
#and write z in a csv file
matlab.lines <- c(
"x = csvread('~/x.csv')",
"y=20",
"z=x+y",
"csvwrite('~/z.csv', z)")
#create a MATLAB script containing all the commands in matlab.lines
writeLines(matlab.lines, con="~/myscript.m")
#run our MATLAB script
system("matlab -nodisplay -r \"run('~/myscript.m'); exit\"")
